package com.casebank;


import java.util.Random;

public class WorldGeometryImpl implements WorldGeometry {

//    private final String PRESET_ELEVATIONS = "0,0,3;0,1,0;0,2,1;0,3,0;0,4,0;0,5,0;0,6,0;0,7,7;0,8,9;0,9,-4;0,10,0;0," +
//            "11,0;0,12,0;0,13,0;0,14,0;0,15,-2;0,16,0;0,17,0;0,18,10;0,19,-3;0,20,0;0,21,2;0,22,7;0,23,0;0,24,0;0,25," +
//            "8;0,26,0;0,27,0;0,28,0;0,29,-4;1,0,9;1,1,6;1,2,0;1,3,0;1,4,6;1,5,4;1,6,0;1,7,0;1,8,10;1,9,0;1,10,0;1,11," +
//            "0;1,12,9;1,13,0;1,14,3;1,15,10;1,16,4;1,17,0;1,18,0;1,19,3;1,20,0;1,21,-3;1,22,0;1,23,1;1,24,0;1,25,4;1," +
//            "26,0;1,27,5;1,28,0;1,29,-3;2,0,0;2,1,5;2,2,3;2,3,3;2,4,0;2,5,-2;2,6,-3;2,7,-1;2,8,4;2,9,0;2,10,-1;2,11," +
//            "5;2,12,-3;2,13,0;2,14,-4;2,15,0;2,16,0;2,17,-2;2,18,0;2,19,7;2,20,-3;2,21,-2;2,22,0;2,23,0;2,24,7;2,25," +
//            "0;2,26,0;2,27,0;2,28,1;2,29,0;3,0,0;3,1,0;3,2,-2;3,3,1;3,4,0;3,5,6;3,6,7;3,7,4;3,8,0;3,9,0;3,10,-3;3,11," +
//            "4;3,12,-2;3,13,0;3,14,0;3,15,0;3,16,0;3,17,0;3,18,0;3,19,0;3,20,0;3,21,-1;3,22,0;3,23,0;3,24,5;3,25,0;3," +
//            "26,0;3,27,-1;3,28,0;3,29,9;4,0,0;4,1,0;4,2,-1;4,3,0;4,4,10;4,5,0;4,6,5;4,7,0;4,8,1;4,9,0;4,10,0;4,11,0;" +
//            "4,12,0;4,13,5;4,14,0;4,15,0;4,16,10;4,17,6;4,18,10;4,19,-3;4,20,5;4,21,0;4,22,0;4,23,-3;4,24,9;4,25,10;" +
//            "4,26,1;4,27,0;4,28,7;4,29,-1;5,0,3;5,1,3;5,2,-2;5,3,10;5,4,4;5,5,0;5,6,0;5,7,0;5,8,4;5,9,0;5,10,5;5,11," +
//            "5;5,12,-2;5,13,-4;5,14,0;5,15,0;5,16,0;5,17,0;5,18,0;5,19,0;5,20,0;5,21,7;5,22,0;5,23,7;5,24,-3;5,25,0;" +
//            "5,26,0;5,27,2;5,28,-2;5,29,-1;6,0,0;6,1,-3;6,2,0;6,3,4;6,4,-1;6,5,0;6,6,3;6,7,0;6,8,-2;6,9,-1;6,10,0;6," +
//            "11,0;6,12,0;6,13,0;6,14,0;6,15,6;6,16,2;6,17,1;6,18,-2;6,19,6;6,20,2;6,21,0;6,22,0;6,23,0;6,24,0;6,25,9;" +
//            "6,26,9;6,27,6;6,28,8;6,29,-3;7,0,0;7,1,0;7,2,0;7,3,0;7,4,3;7,5,6;7,6,0;7,7,0;7,8,7;7,9,1;7,10,0;7,11,0;" +
//            "7,12,1;7,13,7;7,14,7;7,15,10;7,16,-2;7,17,0;7,18,0;7,19,1;7,20,4;7,21,0;7,22,0;7,23,7;7,24,3;7,25,0;7," +
//            "26,9;7,27,3;7,28,0;7,29,0;8,0,3;8,1,7;8,2,0;8,3,0;8,4,1;8,5,0;8,6,0;8,7,1;8,8,0;8,9,-1;8,10,0;8,11,0;8," +
//            "12,0;8,13,-4;8,14,-4;8,15,0;8,16,0;8,17,-2;8,18,6;8,19,0;8,20,0;8,21,2;8,22,0;8,23,0;8,24,0;8,25,10;8," +
//            "26,0;8,27,2;8,28,0;8,29,-1;9,0,-4;9,1,9;9,2,7;9,3,0;9,4,0;9,5,2;9,6,0;9,7,0;9,8,6;9,9,0;9,10,0;9,11,5;9," +
//            "12,2;9,13,0;9,14,-1;9,15,0;9,16,8;9,17,-4;9,18,0;9,19,0;9,20,-3;9,21,8;9,22,-3;9,23,9;9,24,0;9,25,0;9," +
//            "26,0;9,27,0;9,28,-2;9,29,9;10,0,0;10,1,8;10,2,0;10,3,-1;10,4,9;10,5,4;10,6,-3;10,7,-4;10,8,0;10,9,5;10," +
//            "10,5;10,11,0;10,12,1;10,13,0;10,14,-4;10,15,-3;10,16,0;10,17,-2;10,18,0;10,19,0;10,20,0;10,21,0;10,22,0;" +
//            "10,23,0;10,24,0;10,25,0;10,26,4;10,27,9;10,28,0;10,29,0;11,0,6;11,1,0;11,2,0;11,3,0;11,4,6;11,5,0;11,6," +
//            "0;11,7,7;11,8,0;11,9,0;11,10,2;11,11,9;11,12,0;11,13,4;11,14,0;11,15,0;11,16,0;11,17,7;11,18,0;11,19,1;" +
//            "11,20,0;11,21,-3;11,22,0;11,23,-3;11,24,0;11,25,-4;11,26,0;11,27,0;11,28,3;11,29,3;12,0,0;12,1,0;12,2,0;" +
//            "12,3,-4;12,4,8;12,5,0;12,6,0;12,7,0;12,8,0;12,9,0;12,10,0;12,11,0;12,12,-4;12,13,-4;12,14,0;12,15,0;12," +
//            "16,0;12,17,0;12,18,10;12,19,0;12,20,-2;12,21,0;12,22,0;12,23,0;12,24,0;12,25,0;12,26,-4;12,27,9;12,28,8;" +
//            "12,29,0;13,0,0;13,1,0;13,2,7;13,3,0;13,4,10;13,5,4;13,6,-3;13,7,10;13,8,-2;13,9,3;13,10,-1;13,11,0;13," +
//            "12,8;13,13,9;13,14,9;13,15,0;13,16,0;13,17,7;13,18,-3;13,19,0;13,20,3;13,21,6;13,22,5;13,23,0;13,24,0;" +
//            "13,25,6;13,26,0;13,27,3;13,28,4;13,29,0;14,0,-1;14,1,0;14,2,5;14,3,8;14,4,0;14,5,0;14,6,0;14,7,3;14,8,0;14,9,8;14,10,0;14,11,8;14,12,1;14,13,0;14,14,0;14,15,6;14,16,5;14,17,4;14,18,0;14,19,5;14,20,7;14,21,2;14,22,1;14,23,1;14,24,0;14,25,-3;14,26,10;14,27,0;14,28,0;14,29,1;15,0,0;15,1,0;15,2,0;15,3,9;15,4,10;15,5,0;15,6,0;15,7,9;15,8,3;15,9,1;15,10,0;15,11,1;15,12,0;15,13,8;15,14,0;15,15,4;15,16,4;15,17,2;15,18,0;15,19,4;15,20,-3;15,21,3;15,22,-3;15,23,0;15,24,5;15,25,-4;15,26,0;15,27,2;15,28,1;15,29,4;16,0,0;16,1,1;16,2,0;16,3,0;16,4,0;16,5,-3;16,6,-4;16,7,0;16,8,2;16,9,0;16,10,0;16,11,2;16,12,0;16,13,0;16,14,6;16,15,0;16,16,10;16,17,0;16,18,1;16,19,0;16,20,0;16,21,0;16,22,6;16,23,-3;16,24,0;16,25,0;16,26,1;16,27,0;16,28,-3;16,29,0;17,0,2;17,1,0;17,2,3;17,3,0;17,4,0;17,5,-1;17,6,0;17,7,0;17,8,8;17,9,0;17,10,0;17,11,0;17,12,0;17,13,-3;17,14,0;17,15,0;17,16,4;17,17,0;17,18,-1;17,19,9;17,20,0;17,21,0;17,22,3;17,23,1;17,24,7;17,25,0;17,26,-4;17,27,4;17,28,0;17,29,-4;18,0,-3;18,1,0;18,2,0;18,3,5;18,4,0;18,5,0;18,6,0;18,7,-2;18,8,10;18,9,0;18,10,-1;18,11,4;18,12,9;18,13,0;18,14,0;18,15,10;18,16,0;18,17,8;18,18,0;18,19,0;18,20,0;18,21,9;18,22,4;18,23,5;18,24,3;18,25,0;18,26,0;18,27,-3;18,28,9;18,29,0;19,0,0;19,1,6;19,2,-4;19,3,0;19,4,0;19,5,-1;19,6,0;19,7,-4;19,8,0;19,9,5;19,10,0;19,11,0;19,12,0;19,13,0;19,14,0;19,15,6;19,16,9;19,17,7;19,18,0;19,19,0;19,20,0;19,21,8;19,22,0;19,23,0;19,24,7;19,25,0;19,26,1;19,27,5;19,28,0;19,29,0;20,0,3;20,1,-3;20,2,7;20,3,0;20,4,0;20,5,2;20,6,4;20,7,8;20,8,5;20,9,0;20,10,-2;20,11,0;20,12,10;20,13,0;20,14,-3;20,15,-4;20,16,7;20,17,0;20,18,0;20,19,0;20,20,8;20,21,0;20,22,8;20,23,8;20,24,-2;20,25,-4;20,26,4;20,27,0;20,28,0;20,29,6;21,0,0;21,1,0;21,2,8;21,3,0;21,4,0;21,5,-3;21,6,0;21,7,0;21,8,0;21,9,0;21,10,2;21,11,0;21,12,10;21,13,2;21,14,0;21,15,-3;21,16,0;21,17,0;21,18,0;21,19,0;21,20,-4;21,21,4;21,22,0;21,23,0;21,24,9;21,25,-2;21,26,5;21,27,4;21,28,0;21,29,0;22,0,-2;22,1,0;22,2,4;22,3,0;22,4,-2;22,5,0;22,6,6;22,7,0;22,8,-3;22,9,10;22,10,0;22,11,0;22,12,-3;22,13,0;22,14,7;22,15,0;22,16,0;22,17,0;22,18,9;22,19,9;22,20,8;22,21,0;22,22,0;22,23,5;22,24,0;22,25,5;22,26,1;22,27,-1;22,28,-2;22,29,-2;23,0,2;23,1,6;23,2,7;23,3,0;23,4,0;23,5,0;23,6,0;23,7,1;23,8,0;23,9,-3;23,10,5;23,11,0;23,12,0;23,13,5;23,14,6;23,15,-4;23,16,5;23,17,0;23,18,0;23,19,0;23,20,5;23,21,-2;23,22,0;23,23,3;23,24,-1;23,25,6;23,26,-3;23,27,10;23,28,0;23,29,0;24,0,0;24,1,2;24,2,0;24,3,0;24,4,0;24,5,6;24,6,-2;24,7,-3;24,8,7;24,9,-3;24,10,0;24,11,0;24,12,4;24,13,10;24,14,10;24,15,-3;24,16,10;24,17,0;24,18,0;24,19,7;24,20,0;24,21,0;24,22,0;24,23,1;24,24,-3;24,25,5;24,26,3;24,27,0;24,28,0;24,29,0;25,0,-3;25,1,0;25,2,0;25,3,9;25,4,0;25,5,9;25,6,0;25,7,0;25,8,-2;25,9,0;25,10,0;25,11,0;25,12,0;25,13,0;25,14,0;25,15,6;25,16,0;25,17,0;25,18,-1;25,19,1;25,20,2;25,21,0;25,22,0;25,23,0;25,24,0;25,25,8;25,26,6;25,27,0;25,28,3;25,29,0;26,0,8;26,1,-4;26,2,-3;26,3,0;26,4,0;26,5,-1;26,6,8;26,7,9;26,8,-2;26,9,0;26,10,0;26,11,0;26,12,-4;26,13,0;26,14,4;26,15,0;26,16,0;26,17,10;26,18,10;26,19,-2;26,20,1;26,21,0;26,22,3;26,23,7;26,24,0;26,25,0;26,26,0;26,27,0;26,28,-4;26,29,5;27,0,0;27,1,3;27,2,0;27,3,0;27,4,0;27,5,0;27,6,-1;27,7,0;27,8,0;27,9,0;27,10,0;27,11,4;27,12,4;27,13,3;27,14,8;27,15,5;27,16,-1;27,17,2;27,18,0;27,19,0;27,20,-3;27,21,10;27,22,0;27,23,0;27,24,0;27,25,1;27,26,4;27,27,0;27,28,-1;27,29,0;28,0,-2;28,1,0;28,2,0;28,3,-4;28,4,0;28,5,0;28,6,0;28,7,-2;28,8,-2;28,9,0;28,10,0;28,11,0;28,12,5;28,13,0;28,14,0;28,15,2;28,16,9;28,17,0;28,18,0;28,19,6;28,20,0;28,21,0;28,22,9;28,23,0;28,24,6;28,25,7;28,26,0;28,27,0;28,28,-1;28,29,0;29,0,8;29,1,0;29,2,0;29,3,4;29,4,0;29,5,0;29,6,0;29,7,0;29,8,0;29,9,3;29,10,0;29,11,0;29,12,7;29,13,-2;29,14,2;29,15,4;29,16,9;29,17,-4;29,18,0;29,19,0;29,20,0;29,21,0;29,22,0;29,23,0;29,24,0;29,25,8;29,26,2;29,27,-3;29,28,0;29,29,0";
//



    private final String PRESET_ELEVATIONS = "0,0,0;0,1,0;0,2,0;0,3,0;1,0,0;1,1,0;1,2,0;1,3,0;2,0,0;2,1,0;2,2,0;" +
            "2,3,0;3,0,0;3,1,0;3,2,0;3,3,0";

    private static final int FLAT_POSSIBILITY_PERCENTAGE = 40;
    private static final int VALLY_POSSIBILITY_PERCENTAGE = 20;
    private static final int HILL_POSSIBILITY_PERCENTAGE = 40;
    private static final int HILL_MAX_HEIGHT = 10;
    private static final int VALLY_MAX_DEPTH = -4;

    private static final int X_Max = 100;
    private static final int Y_Max = 100;
    private static int[][] elevations;

    private enum TerrianType {
        HILL, VALLY, FLAT;
    }

    public enum ElevationGenerator {
        RANDOM, PRESET;
    }


    public WorldGeometryImpl(ElevationGenerator generator) {
        elevations = new int[X_Max+1][Y_Max+1];
        if (generator.equals(ElevationGenerator.PRESET)) {
            String[] terrians = PRESET_ELEVATIONS.split(";");
            for(String t:terrians){
                String[] ele = t.split(",");
                int x = Integer.valueOf(ele[0]);
                int y = Integer.valueOf(ele[1]);
                int e = Integer.valueOf(ele[2]);
                elevations[x][y] = e;
            }

        } else {
            elevations = calculateElevations();
        }
    }

    @Override
    public int getXMAX() {
        return X_Max;
    }

    @Override
    public int getYMAX() {
        return Y_Max;
    }

    @Override
    public int getElevation(int x, int y) {
        return elevations[x][y];
    }

    private int[][] calculateElevations() {
        Random random = new Random();


        for (int x = 0; x < X_Max+1; x++) {
            for (int y = 0; y < Y_Max+1; y++) {
                int newInt = random.nextInt(100 - 0 + 1) + 0;
                if (newInt < FLAT_POSSIBILITY_PERCENTAGE) {
                    elevations[x][y] = 0;
                } else if (newInt < FLAT_POSSIBILITY_PERCENTAGE + HILL_POSSIBILITY_PERCENTAGE) {
                    elevations[x][y] = getRandomElevetaion(TerrianType.HILL);
                } else {
                    elevations[x][y] = getRandomElevetaion(TerrianType.VALLY);
                }

            }
        }

        return elevations;
    }

    private int getRandomElevetaion(TerrianType terrianType) {
        Random random = new Random();
        int ele = random.nextInt(HILL_MAX_HEIGHT - VALLY_MAX_DEPTH + 1) + VALLY_MAX_DEPTH;
        return ele;
    }

    @Override
    public String getGeometry() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < X_Max+1; i++) {
            for (int j = 0; j < Y_Max+1; j++) {
                sb.append(";").append(i).append(",").append(j).append(",").append(elevations[i][j]);
            }
        }

        return sb.toString().substring(1);
    }
}
